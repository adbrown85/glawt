# @configure_input@

# Package
package      := @PACKAGE_NAME@
version      := @PACKAGE_VERSION@
tarname      := @PACKAGE_TARNAME@

# Directories
prefix       := @prefix@
exec_prefix  := @exec_prefix@
bindir       := @bindir@
srcdir       := @srcdir@
libdir       := @libdir@
includedir   := @includedir@
datarootdir  := @datarootdir@
datadir      := @datadir@
docdir       := @docdir@
htmldir      := @htmldir@

# Tools
INSTALL      := @INSTALL@

# Files
moduledirs   := ${filter %/,${wildcard src/*/}}
modules      := ${patsubst src/%/,%,$(moduledirs)} 
distdir      := $(tarname)-$(version)
tarball      := $(tarname)-$(version)-src.tar.gz
zipfile      := $(tarname)-$(version)-src.zip
winbuild     := $(tarname)-win-build.zip
winbuilddir  := win
archive      := src/lib$(tarname).a

# Targets to pass down
src_targets  := all $(modules) 
doc_targets  := html install-html
test_targets := tests
st_targets   := clean mostlyclean
.PHONY: $(src_targets) $(doc_targets) $(test_targets) check
.DEFAULT: all
$(src_targets):
	@$(MAKE) -C src $@
$(doc_targets):
	@$(MAKE) -C doc $@
$(test_targets):
	@$(MAKE) -C test $@
$(st_targets):
	@$(MAKE) -C src $@
	@$(MAKE) -C test $@
check:
	@echo "  MODULES  = $(modules)"
	@echo "  LIBDIR   = $(libdir)"
	@echo "  INCDIR   = $(includedir)"

# Installation
.PHONY: install uninstall
install:
	@echo "  Installing archive in $(libdir)..."
	@$(INSTALL) -d $(libdir)
	@$(INSTALL) $(archive) $(libdir)
	@echo "  Installing headers in $(includedir)..."
	@$(INSTALL) -d $(includedir)
	@$(INSTALL) -d $(includedir)/$(tarname)
	@$(INSTALL) src/*/*.hpp $(includedir)/$(tarname)
uninstall:
	@echo "  Uninstalling archive from $(libdir)..."
	@$(RM) $(libdir)/$(archive)
	@echo "  Uninstalling headers from $(includedir)..."
	@$(RM) -r $(includedir)/$(tarname)

# Distribution
.PHONY: FORCE dist distcheck
dist: FORCE $(distdir) $(tarball) $(zipfile) $(winbuild) CLEANUP
FORCE:
	@-$(RM) $(tarball) &> /dev/null
	@-$(RM) $(zipfile) &> /dev/null
	@-$(RM) -r $(distdir) &> /dev/null
	@-$(RM) $(winbuild) &> /dev/null
CLEANUP:
	@$(RM) -r $(distdir)
$(tarball): 
	@echo "  Packaging tarball..."
	@tar -czf $(tarball) $(distdir)
$(zipfile):
	@echo "  Packaging zipfile..."
	@zip -r $(zipfile) $(distdir) > /dev/null
$(distdir):
	@echo "  Copying files..."
	@mkdir $(distdir)
	@cp config.guess $(distdir)
	@cp config.in $(distdir)
	@cp config.sub $(distdir)
	@cp configure $(distdir)
	@cp install-sh $(distdir)
	@cp Makefile.in $(distdir)
	@echo "    src"
	@mkdir $(distdir)/src
	@cp src/Makefile.in $(distdir)/src
	@cp src/common.h $(distdir)/src
	@for i in $(modules); do \
        echo "      $${i}"; \
        mkdir $(distdir)/src/$${i}; \
        cp src/$${i}/*.cpp $(distdir)/src/$${i}; \
        cp src/$${i}/*.hpp $(distdir)/src/$${i}; \
        cp src/$${i}/*.d $(distdir)/src/$${i}; \
    done
	@echo "    doc"
	@mkdir $(distdir)/doc
	@cp doc/Makefile.in $(distdir)/doc
	@cp doc/doxyfile $(distdir)/doc
	@cp doc/doxygen.css $(distdir)/doc
$(winbuild):
	@echo "  Zipping Windows build environment..."
	@cd $(winbuilddir) && zip -r ../$(winbuild) * > /dev/null
distcheck: $(tarball)
	@echo "  Unpacking and checking tarball."
	@tar -zxf $(tarball) $(distdir)
	@cd $(distdir) && ./configure
	@$(MAKE) -C $(distdir) all
	@$(MAKE) -C $(distdir) clean
	@$(RM) -r $(distdir)
	@echo "  Package $(tarball) is ready for distribution."
distclean: clean
	@echo "  Removing generated files..."
	@$(RM) -r autom4te.cache
	@$(RM) config.log
	@$(RM) config.status
	@$(RM) Makefile
	@$(RM) src/Makefile
	@$(RM) config.h
	@$(RM) config.in~
	@$(RM) $(tarball)
	@$(RM) $(winbuild)
