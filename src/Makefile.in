# @configure_input@

# Package
package     := @PACKAGE_NAME@
version     := @PACKAGE_VERSION@
tarname     := @PACKAGE_TARNAME@

# Directories
prefix      := @prefix@
exec_prefix := @exec_prefix@
bindir      := @bindir@
srcdir      := @srcdir@
datarootdir := @datarootdir@
datadir     := @datadir@
docdir      := @docdir@
htmldir     := @htmldir@
modules     := ${wildcard */}

# Tools
CXX         := @CXX@
INCLUDES    := ${foreach i,$(modules),-I$(i)/} -I$(srcdir) -I$(srcdir)/..
DEFS        := @DEFS@
DEPS_CFLAGS := @DEPS_CFLAGS@
CXXFLAGS    := @CXXFLAGS@ $(DEFS) $(DEPS_CFLAGS) $(INCLUDES)
LIBS        := @LIBS@
LIBS_EXTRA  := 
DEPS_LIBS   := @DEPS_LIBS@
LDFLAGS     := @LDFLAGS@ $(LIBS) $(LIBS_EXTRA) $(DEPS_LIBS)
ARFLAGS     := -cr
INSTALL     := @INSTALL@

# Files
sources     := ${foreach i,$(modules),${wildcard $(i)/*.cpp}}
objects     := ${subst .cpp,.o,$(sources)}
headers     := ${subst .cpp,.hpp,$(sources)}
archive     := lib$(tarname).a
VPATH       := $(modules)
depends     := ${subst .cpp,.d,$(sources)}

# General phony targets
.PHONY: all clean mostlyclean install uninstall check
.DEFAULT: all
all: $(archive)
clean: mostlyclean
	@echo "  Removing dependencies..."
	@$(RM) $(depends)
mostlyclean:
	@echo "  Removing objects..."
	@$(RM) $(objects)
	@echo "  Removing archive..."
	@$(RM) $(archive)
check:
	@echo "  $(modules)"

# Modules
.PHONY: $(modules)
define module
$(1): $${filter $(1)/%.o,$(objects)}
endef
${foreach i,$(modules),${eval ${call module,$(i)}}}

# Objects and archive
%.o: %.cpp %.hpp
	@echo "  $<"
	@$(CXX) $(CXXFLAGS) -o ${dir $<}${notdir $@} -c $<
	@$(AR) $(ARFLAGS) $(archive) ${dir $<}${notdir $@}
$(archive): ${notdir $(objects)}

# Dependencies (recompile based on objects b/c of inheritance)
%.d: %.hpp
	@echo "  Generating dependencies for $<..."
	@$(CXX) $(CXXFLAGS) -MM ${subst .hpp,.cpp,$<} > $@
ifneq ($(findstring clean,$(MAKECMDGOALS)),clean)
  -include $(depends)
endif
